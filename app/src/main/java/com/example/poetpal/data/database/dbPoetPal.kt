package com.example.poetpal.data.database

import androidx.room.Entity
import androidx.room.PrimaryKey
import com.example.poetpal.domain.Poem
import com.example.poetpal.domain.Setting
import com.example.poetpal.domain.Word
/*
* This file contains the data classes and functions needed to interact with roomDb
*
 */

/**
 * data class used to save settings in roomDb.
 *
 * It only holds one entry with the settings as its fields.
 *
 * @param name
 *
 * Name of the entry and Primary key
 *
 * default = "settings"
 *
 *  â€Ž
 *
 * @param limerickTutorial
 *
 * Whether or not to display the tutorial for limericks.
 *
 * default = true
 */
@Entity(tableName = "settings")
data class DbSetting(
    @PrimaryKey
    val name: String = "Settings",
    val limerickTutorial: Boolean = true,
)

/**
 * converts [DbSetting] to [Setting]
 */
fun DbSetting.asDomainSetting(): Setting {
    return Setting(this.limerickTutorial)
}

/**
 * converts [Setting] to [DbSetting]
 */
fun Setting.asDbSetting(): DbSetting {
    return DbSetting("Settings", this.limerickTutorial)
}

/**
 * Data class to save poems in roomDb
 *
 * @param id
 * autogenerated primary Integer key
 *
 * @param title title of the poem
 * @param text content of the poem
 * @param author author of the poem
 * @param type specifies type of poetry
 */
@Entity(tableName = "poems")
data class DbPoem(
    @PrimaryKey(autoGenerate = true)
    val id: Int,
    val title: String,
    val text: String,
    val author: String,
    val type: String?,
)

/**
 * converts [DbPoem] into [Poem]
 */
fun DbPoem.asDomainPoem(): Poem {
    return Poem(
        this.title,
        this.text,
        this.author,
        this.type,
    )
}

/**
 * converts [Poem] into [DbPoem]
 */
fun Poem.asDbPoem(): DbPoem {
    return DbPoem(
        id = 0,
        title = this.title,
        text = this.text,
        author = this.author,
        type = this.type,
    )
}

/**
 * data class to store words in roomDb
 *
 * @param word the word itself (Primary Key)
 * @param syllables syllables of the word, stored as * separated string
 * @param rhymes rhymes of the word, stored as , separated string
 * @param synonyms synonyms of the word, stored as , separated string
 * @param antonyms antonyms of the word, stored as , separated string
 */
@Entity(tableName = "words")
data class DbWord(
    @PrimaryKey
    val word: String,
    val syllables: String,
    val rhymes: String,
    val synonyms: String,
    val antonyms: String,
)

/**
 * converts [DbWord] to [Word],
 * breaks separated strings up into lists
 */
fun DbWord.asDomainWord(): Word {
    val syllableList = syllables.split("*")
    val rhymeList = rhymes.split(",")
    val synonymList = synonyms.split(",")
    val antonymList = antonyms.split(",")
    return Word(word, syllableList, rhymeList, synonymList, antonymList)
}

/**
 * converts [Word] to [DbWord],
 * encodes lists into separated strings
 */
fun Word.asDbWord(): DbWord {
    val syllableString = syllables.joinToString("*")
    val rhymeString = rhymes.joinToString(",")
    val synonymString = synonyms.joinToString(",")
    val antonymString = antonyms.joinToString(",")
    return DbWord(word, syllableString, rhymeString, synonymString, antonymString)
}
